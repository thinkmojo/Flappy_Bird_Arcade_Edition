<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPipeTop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>side = 0; //0 -top; 1- bottom
height = (room_height/4);
countedFor = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x-=global.worldSpeed*global.d;

if x&lt;-SCALE*(sprite_get_width(sprite_index)/2)
    instance_destroy();
    
if (!countedFor &amp;&amp; objPlayer.x&gt;=x-sprite_get_width(sprBird/2) and side){
    countedFor = 1;
    global.pipes++;
    audio_play_sound(sfx_pipe,0,0);
}
var w = sprite_get_width(sprPipeTop)*SCALE*.5;
var h = sprite_get_height(sprPipeTop)*SCALE*.5;
var w1 = sprite_get_width(sprPipeLower)*SCALE*.5;
var h1 = sprite_get_height(sprPipeLower)*SCALE*.5*height;
if (side == 0){
    if (collision_rectangle(x-w,height,x+w,height-h,objPlayer,1,0)&gt;-1 ||
        collision_rectangle(x-w1,0,x+w1,height-h,objPlayer,1,0)&gt;-1){
            if (global.worldSpeed &lt;&gt; 0){
                global.worldSpeed =0; 
                audio_play_sound(sfx_pipeend,0,0);
                immersion_play_effect(97);  
                /*MOJO*/ 
                global.Credits -= 1;
            }   
        }
} else {
    if (collision_rectangle(x-w,objControl.groundy-height,x+w,objControl.groundy-height+h,objPlayer,1,0)&gt;-1 ||
        collision_rectangle(x-w1,objControl.playArea,x+w1,objControl.playArea-height+h,objPlayer,1,0)&gt;-1){
            if (global.worldSpeed &lt;&gt; 0){
                global.worldSpeed =0; 
                audio_play_sound(sfx_pipeend,0,0);
                immersion_play_effect(97);  
                /*MOJO*/ 
                global.Credits -= 1;
            }   
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var todraw = height-SCALE*sprite_get_height(sprPipeTop);
if (side == 0){
    draw_sprite_ext(sprPipeLower,0,x,0,SCALE,todraw,0,c_white,1);
    draw_sprite_ext(sprPipeTop,0,x,todraw,SCALE,1,0,c_white,1);//draw_text(x+10,height,string(height))
} else { //bottom
    draw_sprite_ext(sprPipeLower,0,x,objControl.groundy,SCALE,-height,0,c_white,1);
    draw_sprite_ext(sprPipeTop,0,x,objControl.groundy-height,SCALE,1,0,c_white,1);//draw_text(x+10,objControl.groundy-height,string(height))
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,0</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
