<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selector = 0; // cycle through the editable keys (from 0 to global.keys_nb)
global.Enter_Key=0; // 1 = key selected and waiting for intput
global.Message_Error = 0; // in case of error display message
global.Selector_Hold = 0;  
global.Selector_Hold_Timer = 0;
padding_top=150
padding_bottom=150
//selector_xstart=view_xview+view_wview/2;
selector_ystart = view_yview+padding_top;
selector_height=(view_yview+view_hview-padding_top-padding_bottom)/global.keys_nb;
selector_width=view_wview/2;
x=view_xview+view_wview/2;
y=selector_ystart;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// reset kesy to default values
if keyboard_check_pressed(vk_shift) {
    file_delete("settings.ini");
    room_restart();
}


if global.Selector_Hold = 1 {global.Selector_Hold_Timer -= 1}
if global.Selector_Hold_Timer &lt; 0 {
    global.Selector_Hold_Timer = 0
    global.Selector_Hold = 0
    }

// Pres Escape to exit config screen
if keyboard_check_pressed(vk_escape) {room_goto(R_Title_Screen)}


// move selector up/down
if keyboard_check_pressed(vk_down) &amp;&amp; global.Selector_Hold=0
    {
    selector += 1;
    y+=selector_height;
    if selector &gt; (global.keys_nb-1) {
        selector = 0;
        y = selector_ystart;
        }
    
    }

if keyboard_check_pressed(vk_up) &amp;&amp; global.Selector_Hold=0 
    {
    selector -= 1;
    y-=selector_height;
    if selector &lt; 0 {
        selector = (global.keys_nb-1);
        y = selector_ystart+selector_height*(global.keys_nb-1);
        }
    }
    
// select key to edit
if keyboard_check_pressed(vk_enter) 
    {   
        global.Enter_Key=1; // 
        //sound_play(S_XXX) // 
        //global.Selector_Hold=1
        for (i = 0; i &lt; global.keys_nb; i++) {
        if selector=i {kbinputSetAction(i, 10, Sr_Control_Set, Sr_Control_Not_Set);}
        }
    }
    
if keyboard_check_pressed(vk_anykey) {
    global.Message_Error=0; //remove error message if exists
    }


    
// reset kesy to default values
/*
if keyboard_check_pressed(vk_space) {
    ini_open("settings.ini");
    ini_write_string("controls","string_customized",O_Control_ini.str_default);
    ini_close();
    ini_open("settings.ini");
    kbinputInitialize(6);
    kbinputSetConfigString(ini_read_string("controls","string_customized",O_Control_ini.str_default));
    ini_close();
}
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
draw_set_halign(fa_center);
draw_set_color(c_white);
//draw_set_font(fntText);

// ---- Debug ----
//draw_text(x+180, y, selector);
//draw_text(x+280, y, kbinputCheckDescription(selector));


draw_text_transformed(x,view_yview+padding_top/2,"CONTROLS CONFIGURATION",2,2,0);
draw_text_transformed(x,view_yview+view_hview-padding_bottom/2,"PRESS 'ESC' TO EXIT",1,1,0);



// Draw Selector 
if global.Enter_Key=0 {
    draw_rectangle_color(x-selector_width/2,y,x+selector_width/2,y+selector_height,c_white,c_white,c_white,c_white,0);
    draw_set_color(c_black);
    draw_text_transformed(x,y,global.Key_Desc[selector]+"   -&gt;   "+kbinputCheckDescription(selector),1,1,0);
    draw_set_color(c_white);
    } 
    else {
    draw_rectangle_color(x-selector_width/2,y,x+selector_width/2,y+selector_height,c_blue,c_blue,c_blue,c_blue,0);
    //draw_set_color(c_white);
    draw_text_transformed(x,y,"ENTER NEW KEY",1,1,0);
    //draw_set_color(c_white);
}

for (i = 0; i &lt; global.keys_nb; i++) {
    if global.Enter_Key=0 { 
        if selector!=i {
            draw_text_transformed(x,selector_ystart+selector_height*i,global.Key_Desc[i]+"   -&gt;   "+kbinputCheckDescription(i),1,1,0);
            }
        }
    else {
        if selector!=i {
            draw_text_transformed(x,selector_ystart+selector_height*i,global.Key_Desc[i]+"   -&gt;   "+kbinputCheckDescription(i),1,1,0);
            }
        }
    
    
}


/*
draw_text_transformed(x,selector_ystart,kbinputCheckDescription(0),1,1,0);
draw_text_transformed(x,selector_ystart+selector_height*1,kbinputCheckDescription(1),1,1,0);    
draw_text_transformed(x,selector_ystart+selector_height*2,kbinputCheckDescription(2),1,1,0);    
draw_text_transformed(x,selector_ystart+selector_height*3,kbinputCheckDescription(3),1,1,0);    
draw_text_transformed(x,selector_ystart+selector_height*4,kbinputCheckDescription(4),1,1,0);    
draw_text_transformed(x,selector_ystart+selector_height*5,kbinputCheckDescription(5),1,1,0); 
*/

if global.Message_Error=1 {draw_text(200, 100, "OOPS, TRY AGAIN");}

    /*
if selector = 0 {draw_rectangle(xx,y,xx+width,yy+height,1)};
if selector = 1 {draw_rectangle(xx+addx*1,yy+addy*1,xx+width+addx*1,yy+height+addy*1,1)};
if selector = 2 {draw_rectangle(xx+addx*2,yy+addy*2,xx+width+addx*2,yy+height+addy*2,1)};
if selector = 3 {draw_rectangle(xx+addx*3,yy+addy*3,xx+width+addx*3,yy+height+addy*3,1)};
if selector = 4 {draw_rectangle(xx+addx*4,yy+addy*4,xx+width+addx*4,yy+height+addy*4,1)};
if selector = 5 {draw_rectangle(xx+addx*5,yy+addy*5,xx+width+addx*5,yy+height+addy*5,1)};
*/

draw_set_color(c_white)



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
